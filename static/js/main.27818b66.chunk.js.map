{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.styled.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.styled.js","components/Statistics/Statistics.js","components/Section/Section.styled.js","components/Section/Section.js","components/Notification/Notification.styled.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","List","ul","ListItem","li","Statistics","state","total","positivePercentage","good","neutral","bad","Segment","section","Title","h2","Section","title","children","Text","p","Notification","message","App","handleFeedback","label","setState","prevState","countTotalFeedback","Object","values","reduce","quantitiy","countPositiveFeedbackPercentage","percentage","Math","round","this","keys","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAEaA,EAASC,IAAOC,OAAV,sX,OCuBJC,EArBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,cAACP,EAAD,CAEEQ,KAAK,SACLC,QAAS,kBAAMJ,EAAgBE,IAHjC,SAKGA,GAJIA,SCPFG,EAAOT,IAAOU,GAAV,0FAMJC,EAAWX,IAAOY,GAAV,6FCyBNC,EA7BI,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC1BC,EAAuBH,EAAvBG,KAAMC,EAAiBJ,EAAjBI,QAASC,EAAQL,EAARK,IACvB,OACE,eAACV,EAAD,WACE,eAACE,EAAD,mBACO,qCAAQM,QAEf,eAACN,EAAD,sBACU,qCAAQO,QAElB,eAACP,EAAD,kBACM,qCAAQQ,QAEd,eAACR,EAAD,oBACQ,qCAAQI,QAEhB,eAACJ,EAAD,gCACoB,qCAAQK,EAAR,cCnBbI,EAAUpB,IAAOqB,QAAV,uEAKPC,EAAQtB,IAAOuB,GAAV,uHCWHC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,eAACN,EAAD,WACE,cAACE,EAAD,UAAQG,IACPC,MCNMC,EAAO3B,IAAO4B,EAAV,qECUFC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,cAACH,EAAD,UAAOG,KCoDDC,E,4MAlDbjB,MAAQ,CACNG,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPa,eAAiB,SAAAC,GACf,EAAKC,UAAS,SAAAC,GACZ,OAAO,eACJF,EAAQE,EAAUF,GAAS,O,EAKlCG,mBAAqB,WAEnB,OADmBC,OAAOC,OAAO,EAAKxB,OACpByB,QAAO,SAACC,EAAWzB,GAAZ,OAAsBA,EAAQyB,IAAW,I,EAGpEC,gCAAkC,WAChC,IAAMC,EAAaC,KAAKC,MAAyB,IAAlB,EAAK9B,MAAMG,KAAc,EAAKmB,sBAC7D,OAAOM,GAA0B,G,4CAGnC,WACE,IAAQ5B,EAA+E+B,KAA/E/B,MAAOkB,EAAwEa,KAAxEb,eAAgBI,EAAwDS,KAAxDT,mBAAoBK,EAAoCI,KAApCJ,gCAC7CtC,EAAUkC,OAAOS,KAAKhC,GAE5B,OACE,qCACE,cAAC,EAAD,CAASW,MAAM,wBAAf,SACG,cAAC,EAAD,CAAiBtB,QAASA,EAASC,gBAAiB4B,MAGvD,cAAC,EAAD,CAASP,MAAM,aAAf,SACGW,IAAuB,EACtB,cAAC,EAAD,CACEtB,MAAOA,EACPC,MAAOqB,IACPpB,mBAAoByB,MAGtB,cAAC,EAAD,CAAcX,QAAQ,+B,GA3ChBiB,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.27818b66.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Button = styled.button`\r\n  width: 100px;\r\n  height: 40px;\r\n  margin-right: 20px;\r\n  padding: 10px 20px;\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  color: #fff;\r\n  background-color: rgb(41, 164, 221);\r\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\r\n  border-radius: 5px;\r\n  border: none;\r\n  &:hover {\r\n    cursor: pointer;\r\n    background-color: rgb(71, 88, 241);\r\n  }\r\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Button} from './FeedbackOptions.styled';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <>\n      {options.map(option => (\n        <Button\n          key={option}\n          type=\"button\"\n          onClick={() => onLeaveFeedback(option)}\n        >\n          {option}\n        </Button>\n      ))}\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n list-style-type: none;\n margin-left: 0;\n padding-left: 0;\n`;\n\nexport const ListItem = styled.li`\n  margin-bottom: 10px;\n  font-weight: 500;\n  font-size: 18px;\n`;\n\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {List, ListItem} from './Statistics.styled';\n\nconst Statistics = ({ state, total, positivePercentage }) => {\n  const { good, neutral, bad } = state;\n  return (\n    <List>\n      <ListItem>\n        Good:<span> {good}</span>\n      </ListItem>\n      <ListItem>\n        Neutral:<span> {neutral}</span>\n      </ListItem>\n      <ListItem>\n        Bad:<span> {bad}</span>\n      </ListItem>\n      <ListItem>\n        Total:<span> {total}</span>\n      </ListItem>\n      <ListItem>\n        Positive feedback:<span> {positivePercentage}%</span>\n      </ListItem>\n    </List>\n  );\n};\n\nStatistics.propTypes = {\n  state: PropTypes.objectOf(PropTypes.number).isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import styled from '@emotion/styled';\r\n\r\nexport const Segment = styled.section`\r\n  margin-top: 40px;\r\n  margin-left: 35px;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  margin-left: 0; \r\n  text-transform: uppercase;\r\n  font-weight: 700;\r\n  font-size: 24px;\r\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Segment, Title } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <Segment>\n      <Title>{title}</Title>\n      {children}\n    </Segment>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import styled from '@emotion/styled';\r\n\r\nexport const Text = styled.p`\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Text} from './Notification.styled';\n\nconst Notification = ({ message }) => {\n  return <Text>{message}</Text>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import React from 'react';\nimport FeedbackOptions from 'components/FeedbackOptions/FeedbackOptions';\nimport Statistics from 'components/Statistics/Statistics';\nimport Section from 'components/Section/Section';\nimport Notification from 'components/Notification/Notification';\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = label => {\n    this.setState(prevState => {\n      return {\n        [label]: prevState[label] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const quantities = Object.values(this.state);\n    return quantities.reduce((quantitiy, total) => total + quantitiy, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const percentage = Math.round((this.state.good * 100) / this.countTotalFeedback());\n    return percentage ? percentage : 0;\n  };\n\n  render() {\n    const { state, handleFeedback, countTotalFeedback, countPositiveFeedbackPercentage } = this;\n    const options = Object.keys(state);\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          {<FeedbackOptions options={options} onLeaveFeedback={handleFeedback} />}\n        </Section>\n\n        <Section title=\"Statistics\">\n          {countTotalFeedback() > 0 ? (\n            <Statistics\n              state={state}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}